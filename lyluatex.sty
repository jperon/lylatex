\ProvidesPackage{lyluatex}

% Dependencies
\RequirePackage{luatexbase}
\RequirePackage{luaotfload}
\RequirePackage{xkeyval}
\RequirePackage{graphicx}
\RequirePackage{minibox}
\RequirePackage{environ}
\RequirePackage{currfile}
\RequirePackage{pdfpages}

\RequirePackage{metalogo}
\newcommand{\lyluatex}{\textit{ly}\LuaTeX}

\edef\ly@false{false}\def\ly@istwosided{\if@twoside\else\ly@false\fi}

% Options
\catcode`-=11
\directlua{
  ly = require(kpse.find_file("lyluatex.lua") or "lyluatex.lua")
  ly.declare_package_options({
    ['addversion'] = {'false', 'true', ''},
    ['cleantmp'] = {'false', 'true', ''},
    ['currfiledir'] = {},
    ['debug'] = {'false', 'true', ''},
    ['extra-bottom-margin'] = {'0', ly.is_dim},
    ['extra-top-margin'] = {'0', ly.is_dim},
    ['fragment'] = {'', 'false', 'true'},
        ['nofragment'] = {'default', ly.is_neg},
    ['fullpagealign'] = {'crop', 'staffline'},
    ['fullpagestyle'] = {''},
    ['gutter'] = {'.4in', ly.is_dim},
        ['exampleindent'] = {'gutter', ly.is_alias},
        ['leftgutter'] = {'', ly.is_dim}, ['rightgutter'] = {'', ly.is_dim},
    ['hpadding'] = {'0.75ex', ly.is_dim},
    ['includepaths'] = {'./'},
    ['indent'] = {'', ly.is_dim},
        ['noindent'] = {'default', ly.is_neg},
    ['insert'] = {'', 'systems', 'fullpage', 'inline', 'bare-inline'},
    ['intertext'] = {''},
    ['label'] = {'false'}, ['labelprefix'] = {'ly_'},
    ['line-width'] = {[[\linewidth]], ly.is_dim},
    ['ly-version'] = {'2.18.2'},
    ['max-protrusion'] = {[[\maxdimen]], ly.is_dim},
        ['max-left-protrusion'] = {'', ly.is_dim},
        ['max-right-protrusion'] = {'', ly.is_dim},
    ['noclef'] = {'false', 'true', ''},
    ['nostaff'] = {'false', 'true', ''},
    ['nostaffsymbol'] = {'false', 'true', ''},
    ['notime'] = {'false', 'true', ''},
    ['notiming'] = {'false', 'true', ''},
    ['notimesig'] = {'false', 'true', ''},
    ['optimize-pdf'] = {'false', 'true', ''},
    ['paperwidth'] = {[[\paperwidth]], ly.is_dim},
    ['paperheight'] = {[[\paperheight]], ly.is_dim},
    ['papersize'] = {'false'},
    ['pass-fonts'] = {'false', 'true', ''},
        ['current-font'] = {}, ['current-font-as-main'] = {'true', 'false', ''},
        ['rmfamily'] = {}, ['sffamily'] = {}, ['ttfamily'] = {},
    ['print-page-number'] = {'false', 'true', ''},
    ['print-only'] = {''},
    ['printfilename'] = {'false', 'true', ''},
    ['program'] = {'lilypond'},
    ['protrusion'] = {'', ly.is_dim},
        ['noprotrusion'] = {'default', ly.is_neg},
    ['quote'] = {'false', 'true', ''},
    ['ragged-right'] = {'default', 'true', 'false', ''},
        ['noragged-right'] = {'default', ly.is_neg},
    ['relative'] = {'false', ly.is_num},
        ['norelative'] = {'default', ly.is_neg},
    ['showfailed'] = {'false', 'true' ,''},
    ['staffsize'] = {'0', ly.is_dim},
        ['inline-staffsize'] = {'0', ly.is_dim},
    ['tmpdir'] = {'tmp_ly'},
    ['twoside'] = {'\ly@istwosided', 'false', 'true', ''},
    ['verbatim'] = {'false', 'true', ''},
    ['voffset'] = {'0pt', ly.is_dim},
    ['valign'] = {'center', 'top', 'bottom'},
    % MusicXML options
    ['absolute'] = {'false', 'true', ''},
    ['language'] = {'false'},
    ['lxml'] = {'false', 'true'},
    ['no-articulation-directions'] = {'true', 'false', ''},
    ['no-beaming'] = {'true', 'false', ''},
    ['no-page-layout'] = {'true', 'false', ''},
    ['no-rest-positions'] = {'true', 'false', ''},
    ['verbose'] = {'false', 'true', ''},
    ['xml2ly'] = {'musicxml2ly'},
  })
}
\directlua{
  if ly.get_option('cleantmp') then
    luatexbase.add_to_callback('stop_run', ly.clean_tmp_dir, 'lyluatex cleantmp')
    luatexbase.add_to_callback('stop_run', ly.conclusion_text, 'lyluatex conclusion')
  end
}
\catcode`-=12

%\directlua{ly.TWOSIDE = 'f'}

\newcommand{\ly@setunits}{%
  \let\ly@old@in\in\protected\def\in{in}%
  \let\ly@old@pt\pt\protected\def\pt{pt}%
  \let\ly@old@mm\mm\protected\def\mm{mm}%
  \let\ly@old@cm\cm\protected\def\cm{cm}%
  \let\ly@old@hfuzz\hfuzz\setlength{\hfuzz}{\maxdimen}%
}
\newcommand{\ly@resetunits}{%
  \let\in\ly@old@in%
  \let\pt\ly@old@pt%
  \let\mm\ly@old@mm%
  \let\cm\ly@old@cm%
  \setlength{\hfuzz}{\ly@old@hfuzz}%
}

% Command to change options during the document
\newcommand{\lysetoption}[2]{\directlua{ly.set_property([[#1]], [[#2]])}}

% How the filename of a score will look like (if printed)
\newcommand{\lyFilename}[1]{\noindent #1\par\bigskip}

% Appearance of verbatim 'intertext' (if printed)
\newcommand{\lyIntertext}[1]{\noindent #1\par\bigskip}

% Appearance of LilyPond version (if printed)
\newcommand{\lyVersion}[1]{\noindent {\footnotesize\emph{(GNU LilyPond #1)}\par}\bigskip}

% Retrieve the three main font families (rm, sf, tt)
% and store them as options. Additionally store the
% *current* font for optional use.
\newcommand{\ly@currentfonts}{%
  \begingroup%
    \directlua{ly.set_property('current-font', ly.get_font_family(font.current()))}%
    \rmfamily \edef\rmfamilyid{\fontid\font}%
    \sffamily \edef\sffamilyid{\fontid\font}%
    \ttfamily \edef\ttfamilyid{\fontid\font}%
    \directlua{
      if ly.score.rmfamily == '' then
          ly.set_property('rmfamily', ly.get_font_family(\rmfamilyid))
      else
          ly.set_property('current-font-as-main', 'false')
      end
      if ly.score.sffamily == '' then
          ly.set_property('sffamily', ly.get_font_family(\sffamilyid))
      end
      if ly.score.ttfamily == '' then
          ly.set_property('ttfamily', ly.get_font_family(\ttfamilyid))
      end
    }%
  \endgroup%
}

\newcommand{\ly@checkprepost}{%
  \ifx\preLilyPondExample\undefined%
    \directlua{ly.pre_lilypond = false}%
  \else%
    \directlua{ly.pre_lilypond = true}%
  \fi%
  \ifx\postLilyPondExample\undefined%
    \directlua{ly.post_lilypond = false}%
  \else%
    \directlua{ly.post_lilypond = true}%
  \fi%
  \ifx\betweenLilyPondSystem\undefined%
    \directlua{ly.between_lilypond = false}%
  \else%
    \directlua{ly.between_lilypond = true}%
  \fi%
}

% Main commands
% Score processing
\newcommand*{\ly@compilescore}[1]{%
  \ly@setunits%
  \ly@checkprepost%
  \directlua{
    ly.set_property('currfiledir', [[\currfiledir]])
    ly.set_property('twoside', '\ly@istwosided')
    #1
    ly.newpage_if_fullpage()
  }%
  \ly@resetunits%
  \ly@currentfonts%
  \directlua{ly.score:process()}%
}

% Inclusion of a .ly file
\newcommand*\includely[2][]{%
\directlua{ly.state = 'file'}%
  \ly@compilescore{ly.file(
    '\luatexluaescapestring{#2}', [[#1]]
  )}%
}

% Inclusion of a musicxml file
\newcommand*\musicxmlfile[2][]{%
  \ly@compilescore{ly.file_musicxml(
    '\luatexluaescapestring{#2}', [[#1]]
  )}
}

% Base environments to include a LilyPond fragment integrated into
% the document.
\newcommand\lyscorebegin[1]{\directlua{ly.buffenv_begin()}}
\newcommand\lyscoreend{\directlua{ly.buffenv_end()}}
\newenvironment{ly@bufferenv}{%
  \lyscorebegin{\@currenvir}%
}{%
  \lyscoreend%
  \ly@compilescore{ly.fragment(ly.score_content, [[\options]])}%
}

\NewEnviron{ly@compilely}{%
  \ly@compilescore{ly.fragment(
    '\luatexluaescapestring{\unexpanded\expandafter{\BODY}}',
    [[\options]]
  )}%
}

% Commands to print verbatim content of the score
\newcommand\lysetverbenv[2]{%
  \directlua{ly.verbenv = {
    '\luatexluaescapestring{\detokenize{#1}}',
    '\luatexluaescapestring{\detokenize{#2}}'
  }}%
}

% Parametrized command and environment for included LilyPond fragment
\newenvironment{ly}[1][]{%
  \edef\options{#1}%
  \directlua{ly.state = 'env'}%
  \ly@bufferenv
}{%
  \endly@bufferenv
}

\newcommand*{\lily}[2][]{%
  \edef\options{#1}%
  \let\ly@oldrepeat\repeat\def\repeat{}% Fix #51
  \directlua{ly.state = 'cmd'}%
  \begin{ly@compilely}%
    #2
  \end{ly@compilely}%
  \let\repeat\ly@oldrepeat%
}

% Commands for compatibility with lilypond-book
\let\lilypondfile\includely%
\protected\def\lilypond{%
  \def\reserved@a{lilypond}%
  \ifx\reserved@a\@currenvir\expandafter\ly%
  \else\expandafter\lily\fi%
}%
\let\endlilypond\endly
